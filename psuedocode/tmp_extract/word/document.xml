<?xml version="1.0" encoding="UTF-8" standalone="yes"?><w:document xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:wne="http://schemas.microsoft.com/office/word/2006/wordml" xmlns:sl="http://schemas.openxmlformats.org/schemaLibrary/2006/main" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture" xmlns:c="http://schemas.openxmlformats.org/drawingml/2006/chart" xmlns:lc="http://schemas.openxmlformats.org/drawingml/2006/lockedCanvas" xmlns:dgm="http://schemas.openxmlformats.org/drawingml/2006/diagram" xmlns:wps="http://schemas.microsoft.com/office/word/2010/wordprocessingShape" xmlns:wpg="http://schemas.microsoft.com/office/word/2010/wordprocessingGroup" xmlns:w14="http://schemas.microsoft.com/office/word/2010/wordml" xmlns:w15="http://schemas.microsoft.com/office/word/2012/wordml" xmlns:w16="http://schemas.microsoft.com/office/word/2018/wordml" xmlns:w16cex="http://schemas.microsoft.com/office/word/2018/wordml/cex" xmlns:w16cid="http://schemas.microsoft.com/office/word/2016/wordml/cid" xmlns="http://schemas.microsoft.com/office/tasks/2019/documenttasks" xmlns:cr="http://schemas.microsoft.com/office/comments/2020/reactions"><w:body><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000001"><w:pPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="240" w:line="275.9999942779541" w:lineRule="auto"/><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/></w:rPr></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"># 23 - Plugin: Base Plugin (BasePlugin)</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">This file provides the pseudocode for the `BasePlugin` abstract base class. All concrete analytics plugins (e.g., for traffic analysis, engagement metrics) will inherit from this class. It defines a common interface that plugins must implement, ensuring consistency in how plugins are initialized, described, and executed by the `PluginService`.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">**Target Application File:** `app/plugins/base_plugin.py`</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">**Corresponding Test File (to be generated by LLM):** `tests/unit/plugins/test_base_plugin.py`. Tests for an abstract base class would typically involve:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">* Ensuring it cannot be instantiated directly.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">* Creating a minimal concrete subclass for testing purposes.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">* Verifying that the concrete subclass must implement all abstract methods.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">* Testing any concrete methods provided by the base class (if any, though this example focuses on abstract methods).</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">## Pseudocode for Application Code (`app/plugins/base_plugin.py`)</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">```python</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">&quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">Base Plugin Abstract Class (BasePlugin).</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">Defines the common interface that all analytics plugins must implement.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">Plugins are responsible for specific data processing or analysis tasks.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">&quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">import logging</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">from abc import ABC, abstractmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">from typing import Dict, Any, TYPE_CHECKING</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve"># For type hinting dependencies that will be injected</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">if TYPE_CHECKING:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    from app.services.ga4_service import GA4Service</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    from app.models.database import Database</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    # Add other common services or dependencies plugins might need</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">logger = logging.getLogger(__name__)</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">class BasePlugin(ABC):</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    Abstract Base Class for all analytics plugins.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    Concrete plugins must inherit from this class and implement all its</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    abstract methods. This ensures that the PluginService can interact</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    with all plugins in a consistent manner.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    Attributes (to be set in subclass or via constructor):</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        ga4_service (GA4Service): An instance of the GA4Service for data fetching.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        db_service (Database): An instance of the Database service for model interactions.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        # Other common dependencies can be added here or passed via kwargs.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    def __init__(self, ga4_service: 'GA4Service', database: 'Database', **kwargs: Any):</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Initializes the base plugin with common dependencies.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Args:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            ga4_service (GA4Service): Instance of the GA4 data fetching service.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            database (Database): Instance of the database interaction service/class.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            **kwargs (Any): Additional dependencies or configuration specific to plugins.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                            Subclasses can utilize these as needed.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        if ga4_service is None:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            raise ValueError(&quot;GA4Service dependency cannot be None for a plugin.&quot;)</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        if database is None:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            raise ValueError(&quot;Database dependency cannot be None for a plugin.&quot;)</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            </w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        self.ga4_service = ga4_service</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        self.db = database # Using self.db for consistency with other services</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        self.additional_config = kwargs</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        logger.debug(f&quot;BasePlugin initialized for subclass {self.__class__.__name__} with GA4Service and Database.&quot;)</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @staticmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @abstractmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    def get_plugin_name() -&gt; str:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Returns the unique, machine-readable name of the plugin.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        This name is typically used for registration and lookup in the PluginService.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        This should be a class/static method so it can be accessed without instantiation.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Example: &quot;traffic_overview_plugin&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        pass</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @staticmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @abstractmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    def get_plugin_display_name() -&gt; str:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Returns a human-readable, display name for the plugin.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Used for UI presentation.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        This should be a class/static method.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Example: &quot;Traffic Overview Report&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        pass</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @staticmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @abstractmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    def get_plugin_description() -&gt; str:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Returns a brief human-readable description of what the plugin does.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Used for UI presentation.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        This should be a class/static method.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Example: &quot;Generates a summary of website traffic including users, sessions, and pageviews.&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        pass</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    @abstractmethod</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    def process(self, context: Dict[str, Any]) -&gt; Dict[str, Any]:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Executes the main logic of the plugin.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        This method will receive a context dictionary containing necessary</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        input data or parameters (e.g., GA4 property ID, date ranges, specific</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        user selections) and should return a dictionary containing the</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        results of its processing. The structure of the result is plugin-specific</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        but should be documented by each plugin.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Args:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            context (Dict[str, Any]): A dictionary containing data and parameters</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                      required by the plugin for its execution.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                      Example:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                      {</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                          'ga4_property_id': 'properties/12345',</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                          'date_range_str': 'last-30-days',</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                          'parsed_date_range': {'startDate': 'YYYY-MM-DD', 'endDate': 'YYYY-MM-DD'},</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                          'user_preferences': {...},</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                          ... any other relevant data ...</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                      }</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">        Returns:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">            Dict[str, Any]: A dictionary containing the results of the plugin's</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                            processing. The structure of this dictionary is defined</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                            by the concrete plugin.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                            Example:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                            {</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                'summary_metrics': {'total_users': 1000, 'total_sessions': 1200},</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                'detailed_data_table': [{'date': '...', 'users': ...}, ...],</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                'chart_data': {...},</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                                'raw_metrics_for_db': [{'metric_name': ..., 'metric_value': ...}, ...]</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">                            }</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        pass</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    # Optional: Common utility methods for plugins can be added here.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    # For example, a method to parse date ranges if all plugins need it.</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    # However, it's often better to use dedicated utility modules (like date_utils)</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">    # and inject them or access them via services if complex.</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/><w:t xml:space="preserve">    def _log_processing_step(self, step_message: str, level: str = &quot;info&quot;) -&gt; None:</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        &quot;&quot;&quot;Helper method for consistent logging within plugin processing.&quot;&quot;&quot;</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        plugin_class_name = self.__class__.__name__</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        log_func = getattr(logger, level, logger.info)</w:t><w:br w:type="textWrapping"/><w:t xml:space="preserve">        log_func(f&quot;[{plugin_class_name}] {step_message}&quot;)</w:t><w:br w:type="textWrapping"/><w:br w:type="textWrapping"/></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000002"><w:pPr><w:pStyle w:val="Heading2"/><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="120" w:before="0" w:line="275.9999942779541" w:lineRule="auto"/><w:rPr><w:rFonts w:ascii="Google Sans" w:cs="Google Sans" w:eastAsia="Google Sans" w:hAnsi="Google Sans"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="30"/><w:szCs w:val="30"/></w:rPr></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans" w:cs="Google Sans" w:eastAsia="Google Sans" w:hAnsi="Google Sans"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="30"/><w:szCs w:val="30"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">Notes on Implementation:</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000003"><w:pPr><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="465" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">Abstract Methods:</w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"> get_plugin_name(), get_plugin_display_name(), get_plugin_description(), and process() are declared as abstract methods using @abstractmethod (and @staticmethod for the metadata getters). Concrete plugin classes </w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="1"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">must</w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"> implement these.</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000004"><w:pPr><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="465" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">Static Metadata Methods:</w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"> get_plugin_name(), get_plugin_display_name(), and get_plugin_description() are defined as @staticmethod because this information is inherent to the plugin class itself and should be accessible without needing to instantiate the plugin (e.g., for listing available plugins in the UI).</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000005"><w:pPr><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="465" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">Constructor (__init__):</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000006"><w:pPr><w:numPr><w:ilvl w:val="1"/><w:numId w:val="2"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="870" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">The base constructor takes common dependencies like GA4Service and Database. Concrete plugins can extend this constructor if they have additional specific dependencies, but they </w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="1"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">must</w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"> call super().__init__(...).</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000007"><w:pPr><w:numPr><w:ilvl w:val="1"/><w:numId w:val="2"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="870" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">**kwargs is included to allow for future flexibility or plugin-specific configurations to be passed during instantiation by the PluginService.</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000008"><w:pPr><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="465" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">process(context) Method:</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="00000009"><w:pPr><w:numPr><w:ilvl w:val="1"/><w:numId w:val="3"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="870" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">This is the core method where each plugin implements its unique data fetching (via self.ga4_service), analysis, and transformation logic.</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="0000000A"><w:pPr><w:numPr><w:ilvl w:val="1"/><w:numId w:val="3"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="870" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">The context dictionary is the primary way to pass runtime parameters (like property ID, date ranges) to the plugin.</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="0000000B"><w:pPr><w:numPr><w:ilvl w:val="1"/><w:numId w:val="3"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="870" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">The structure of the returned dictionary is up to each plugin but should be well-defined so the ReportService or other consumers know how to interpret it (e.g., for saving ReportData or preparing data for a PDF).</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="0000000C"><w:pPr><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="0" w:afterAutospacing="0" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="465" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">Dependency Injection:</w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"> The design relies on the PluginService to instantiate plugins and inject the necessary service dependencies (ga4_service, database) into their constructors.</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="0000000D"><w:pPr><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="120" w:before="0" w:beforeAutospacing="0" w:line="275.9999942779541" w:lineRule="auto"/><w:ind w:left="465" w:hanging="360"/></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:b w:val="1"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">Logging:</w:t></w:r><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve"> A simple helper _log_processing_step is included as an example of a utility that could be part of the base class for consistent logging.</w:t></w:r></w:p><w:p w:rsidR="00000000" w:rsidDel="00000000" w:rsidP="00000000" w:rsidRDefault="00000000" w:rsidRPr="00000000" w14:paraId="0000000E"><w:pPr><w:pBdr><w:top w:space="0" w:sz="0" w:val="nil"/><w:left w:space="0" w:sz="0" w:val="nil"/><w:bottom w:space="0" w:sz="0" w:val="nil"/><w:right w:space="0" w:sz="0" w:val="nil"/><w:between w:space="0" w:sz="0" w:val="nil"/></w:pBdr><w:shd w:fill="auto" w:val="clear"/><w:spacing w:after="240" w:before="120" w:line="275.9999942779541" w:lineRule="auto"/><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/></w:rPr></w:pPr><w:r w:rsidDel="00000000" w:rsidR="00000000" w:rsidRPr="00000000"><w:rPr><w:rFonts w:ascii="Google Sans Text" w:cs="Google Sans Text" w:eastAsia="Google Sans Text" w:hAnsi="Google Sans Text"/><w:i w:val="0"/><w:color w:val="1b1c1d"/><w:sz w:val="24"/><w:szCs w:val="24"/><w:rtl w:val="0"/></w:rPr><w:t xml:space="preserve">This BasePlugin class provides a solid foundation for creating a modular and extensible plugin system for the GA4 Analytics Dashboard</w:t></w:r></w:p><w:sectPr><w:pgSz w:h="15840" w:w="12240" w:orient="portrait"/><w:pgMar w:bottom="1440" w:top="1440" w:left="1440" w:right="1440" w:header="0" w:footer="720"/><w:pgNumType w:start="1"/></w:sectPr></w:body></w:document>